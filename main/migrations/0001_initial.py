# Generated by Django 3.0.8 on 2020-09-05 20:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import localflavor.us.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication', models.CharField(max_length=30)),
                ('drug_class', models.CharField(max_length=30)),
                ('reaction', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='HealthConcern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Immunization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('mass', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(max_length=30)),
                ('suffix', models.CharField(blank=True,
                                            choices=[('j', 'Jr.'), ('s', 'Sr.'), ('1', 'I'), ('2', 'II'), ('3', 'III')],
                                            max_length=30, null=True)),
                ('social_security_number', models.CharField(blank=True, max_length=11, null=True, unique=True)),
                ('sex_assigned_at_birth',
                 models.CharField(choices=[('f', 'Female'), ('m', 'Male'), ('o', 'Other')], default='f', max_length=6)),
                ('explain', models.CharField(blank=True, max_length=400, null=True)),
                ('date_of_birth', models.DateField()),
                ('race', models.CharField(blank=True, max_length=30, null=True)),
                ('ethnicity', models.CharField(blank=True, max_length=30, null=True)),
                ('preferred_language', models.CharField(blank=True, max_length=30, null=True)),
                ('current_address', models.CharField(blank=True, max_length=30, null=True)),
                ('address1', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 1')),
                ('address2', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 2')),
                ('zip_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='ZIP / Postal code')),
                ('city', models.CharField(blank=True, max_length=1024, null=True, verbose_name='City')),
                ('state', localflavor.us.models.USStateField(blank=True, max_length=2, null=True)),
                ('previous_address', models.CharField(blank=True, max_length=30, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True, unique=True)),
                ('phone_number_type', models.CharField(blank=True, max_length=30, null=True)),
                ('email_address', models.CharField(blank=True, max_length=40, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='PatientEncounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smoking', models.BooleanField()),
                ('diabetes', models.BooleanField()),
                ('alcohol', models.BooleanField()),
                ('diastolic_blood_pressure', models.IntegerField(
                    validators=[django.core.validators.MaxValueValidator(200),
                                django.core.validators.MinValueValidator(1)])),
                ('systolic_blood_pressure', models.IntegerField(
                    validators=[django.core.validators.MaxValueValidator(200),
                                django.core.validators.MinValueValidator(1)])),
                ('body_height_primary', models.IntegerField(validators=[django.core.validators.MaxValueValidator(8),
                                                                        django.core.validators.MinValueValidator(0)])),
                ('body_height_secondary', models.FloatField(validators=[django.core.validators.MaxValueValidator(99),
                                                                        django.core.validators.MinValueValidator(0)])),
                ('body_weight', models.FloatField(validators=[django.core.validators.MaxValueValidator(500),
                                                              django.core.validators.MinValueValidator(1)])),
                ('heart_rate', models.IntegerField(validators=[django.core.validators.MaxValueValidator(300),
                                                               django.core.validators.MinValueValidator(1)])),
                ('respiratory_rate', models.IntegerField(validators=[django.core.validators.MaxValueValidator(500),
                                                                     django.core.validators.MinValueValidator(1)])),
                ('body_temperature', models.FloatField(validators=[django.core.validators.MaxValueValidator(200),
                                                                   django.core.validators.MinValueValidator(1)])),
                ('oxygen_concentration', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100),
                                                                         django.core.validators.MinValueValidator(1)])),
                ('bmi_percentile', models.IntegerField(blank=True, null=True,
                                                       validators=[django.core.validators.MaxValueValidator(100),
                                                                   django.core.validators.MinValueValidator(1)])),
                ('weight_for_length_percentile', models.IntegerField(blank=True, null=True, validators=[
                    django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('head_occipital_frontal_circumference_percentile', models.IntegerField(blank=True, null=True,
                                                                                        validators=[
                                                                                            django.core.validators.MaxValueValidator(
                                                                                                100),
                                                                                            django.core.validators.MinValueValidator(
                                                                                                1)])),
                ('body_mass_index', models.FloatField(blank=True, null=True,
                                                      validators=[django.core.validators.MaxValueValidator(500),
                                                                  django.core.validators.MinValueValidator(0)])),
                ('glucose_level', models.FloatField(blank=True, null=True,
                                                    validators=[django.core.validators.MaxValueValidator(500),
                                                                django.core.validators.MinValueValidator(1)])),
                ('weeks_pregnant', models.IntegerField(blank=True, null=True,
                                                       validators=[django.core.validators.MaxValueValidator(45),
                                                                   django.core.validators.MinValueValidator(1)])),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('results', models.CharField(max_length=50)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Test')),
            ],
        ),
        migrations.CreateModel(
            name='fEMRUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
